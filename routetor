#!/usr/bin/env python
"""A socket server for routing specific source addresses through Tor"""

import logging
import socket
from os import getuid, path, remove, chown, chmod
from subprocess import call, PIPE
from grp import getgrnam
from stat import S_IRUSR, S_IWUSR, S_IWGRP
from ConfigParser import RawConfigParser
import atexit
import argparse

"""
Copyright 2015 Sean Whalen
Copyright 2015 Jacob Gajek

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""

__version__ = "2.0.1"

IPTABLES_PATH = "/sbin/iptables" 
SOCKPATH = "/tmp/routetor"


def rule_exists(rule, table=None):
    """Checks if the given iptables rule already exists"""
    cmdline = [IPTABLES_PATH]
    if table:
        cmdline += ["-t", table]
    cmdline += ["-C"] + rule
    return call(cmdline, stdout=PIPE, stderr=PIPE) == 0


def insert_rule(rule, table=None):
    """Inserts the given iptables rule with a higher priority than existing rules"""
    if not rule_exists(rule, table=table):
        cmdline = [IPTABLES_PATH]
        if table:
            cmdline += ["-t", table]
        cmdline += ["-I"] + rule
        return call(cmdline)


def delete_rule(rule, table=None):
    """Deletes an existing iptables rule"""
    cmdline = [IPTABLES_PATH]
    if table:
        cmdline += ["-t", table]
    cmdline += ["-D"] + rule
    return call(cmdline)


def start_proxy(args, address):
    """Starts transparent proxy for a specific source IP address"""
    logging.info("starting transparent proxy for {0}".format(address))
    
    # Prevent packet leaks (https://lists.torproject.org/pipermail/tor-talk/2014-March/03507.html)
    insert_rule(["OUTPUT", "-m", "conntrack", "--ctstate", "INVALID", "-j", "DROP"])
    insert_rule(["OUTPUT", "-m", "state", "--state", "INVALID", "-j", "DROP"])

    # Add DNS route
    rule = ["PREROUTING", "-s", address, "-p", "udp", "--dport", "53",
            "-j", "REDIRECT", "--to-ports", str(args.dnsport)]
    
    if args.interface:
        rule += ["-i", args.interface]

    insert_rule(rule, table="nat")

    # Add TCP route -- ignore Cuckoo result server port
    rule = ["PREROUTING", "-s", address, "-p", "tcp", "--syn", "!", "--dport", str(args.resultport),
            "-j", "REDIRECT", "--to-ports", str(args.proxyport)]

    if args.interface:
        rule += ["-i", args.interface]

    insert_rule(rule, table="nat")


def stop_proxy(args, address):
    """Stops transparent proxy for a specific source IP address"""
    logging.info("stopping transparent proxy for {0}".format(address))

    # Delete DNS route
    rule = ["PREROUTING", "-s", address, "-p", "udp", "--dport", "53",
            "-j", "REDIRECT", "--to-ports", str(args.dnsport)]

    if args.interface:
        rule += ["-i", args.interface]

    delete_rule(rule, table="nat")

    # Delete TCP route
    rule = ["PREROUTING", "-s", address, "-p", "tcp", "--syn", "!", "--dport", str(args.resultport),
            "-j", "REDIRECT", "--to-ports", str(args.proxyport)]

    if args.interface:
        rule += ["-i", args.interface]

    delete_rule(rule, table="nat")


if __name__ == "__main__":

    if getuid() != 0:
        print("This script must be run as root")
        exit(1)

    # Parse command-line arguments
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument("-l", "--logfile", help="Direct all log output to this file", default="/dev/null")
    parser.add_argument("-g", "--sockgroup", help="Change owner of Unix socket to this group", default="cuckoo")
    parser.add_argument("-d", "--dnsport", type=int, help="Tor DNS port", default=5353)
    parser.add_argument("-p", "--proxyport", type=int, help="Tor proxy port", default=9040)
    parser.add_argument("-r", "--resultport", type=int, help="Cuckoo result server port", default=2042)
    parser.add_argument("-i", "--interface", help="Source interface for Tor routed traffic")
    parser.add_argument("-c", "--configfile", help="Read options from this configuration file")
    args = parser.parse_args()

    # Parse configuration file if specified
    if args.configfile and path.exists(args.configfile):
        config = RawConfigParser()
        config.read(args.configfile)

        for option in ["logfile", "sockgroup", "dnsport", "proxyport", "resultport", "interface"]:
            if config.has_option("routetor", option):
                args.__setattr__(option, config.get("routetor", option))

    # Initialize logging engine
    logging.basicConfig(filename=args.logfile, level=logging.INFO, format="%(asctime)s routetor: %(message)s")
    atexit.register(logging.info, "exiting")
    logging.info("v{0} starting".format(__version__))

    # Create Unix socket
    sock = socket.socket(socket.AF_UNIX, socket.SOCK_DGRAM)

    if path.exists(SOCKPATH):
        try:
            remove(SOCKPATH)
            logging.warning("removing stale socket at {0}".format(SOCKPATH))
        except OSError as error:
            logging.error("failed to remove stale socket at {0} ({1})".format(SOCKPATH, error))

    try:
        sock.bind(SOCKPATH)
        chown(SOCKPATH, 0, getgrnam(args.sockgroup).gr_gid)
        chmod(SOCKPATH, S_IRUSR | S_IWUSR | S_IWGRP)
    except Exception as error:
        logging.CRITICAL("failed to listen at {0} ({1})".format(SOCKPATH, error))
        exit(1)

    # Main command loop
    while True:
        try:
            datagram = sock.recv(1024)

            if datagram.split()[0] == "start":
                address = datagram.split()[1]
                start_proxy(args, address)
                continue

            if datagram.split()[0] == "stop":
                address = datagram.split()[1]
                stop_proxy(args, address)
                continue

            logging.warning("unrecognized command ({0})".format(datagram))

        except Exception as error:
            logging.error(error)

